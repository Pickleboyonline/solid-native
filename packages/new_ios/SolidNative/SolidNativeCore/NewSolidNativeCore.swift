
typealias SolidNativeViewTypeName = String
typealias NodeId = UInt8

class SolidNativeCore {
    // TODO: Eventually have this autogenerated => Have a separate file that makes it
    // TODO: and import it here
    let viewTypeRegistry: [SolidNativeViewTypeName: SolidNativeView] = [:]
    
    var viewWrapperRegistry: [NodeId:SolidNativeViewWrapper] = [:]
    
    var rootView = 0
    
}


extension SolidNativeCore {
    func start() {
        // Create the library and pass an self. i know its a reference cycle
        // but since these live forever it doesnt really matter.
        
        // We need to tell Rust that our root view is create to attatch it to out system
        // Call the create root view and then update our internal ID with that to reference it in
        // build system. The callbaks should take care of it.
        
        // TODO: Determine how to style root view. Set the props? Special view to have measurement function?
        
        // TODO: Handle module system. (custom swift/rust code)
        
        // Start JS runtime
    }
    
    /// Called by library
    func createView(_ nodeId: UInt8, _ type: SolidNativeViewTypeName) {
        
    }
}
